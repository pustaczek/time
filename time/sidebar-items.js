initSidebarItems({"enum":[["Language","Languages used in formatting. Follows ISO 639-1."],["ParseError","An error ocurred while parsing."],["Sign","Contains the sign of a value: positive, negative, or zero."],["Weekday","Days of the week."]],"fn":[["days_in_year","Get the number of calendar days in a given year, either 365 or 366."],["is_leap_year","Returns if the provided year is a leap year in the proleptic Gregorian calendar. Uses astronomical year numbering."],["weeks_in_year","Get the number of weeks in the ISO year."]],"mod":[["prelude","A collection of traits (and possibly types, enums, etc.) that are useful to import. Unlike the standard library, this must be explicitly included."]],"struct":[["Date","Calendar date."],["DateTime","Combined date and time."],["Duration","A span of time with nanosecond precision."],["Instant","A measurement of a monotonically nondecreasing clock. Opaque and useful only with [`Duration`]."],["OffsetDateTime","A [`DateTime`] with a [`UtcOffset`]."],["OutOfRangeError","An error type indicating that a conversion failed because the target type could not store the initial value."],["Time","The clock time within a given date. Nanosecond precision."],["UtcOffset","An offset from UTC."]],"trait":[["NumericalDuration","Create `Duration`s from primitive and core numeric types."],["NumericalStdDuration","Create `std::time::Duration`s from primitive and core numeric types."],["NumericalStdDurationShort","Create `std::time::Duration`s from primitive and core numeric types. Unless you are always expecting a `std::time::Duration`, you should prefer to use [`NumericalStdDuration`] for clarity."]],"type":[["PreciseTime",""],["SteadyTime",""]]});